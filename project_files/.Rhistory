+     geom_sf()+
+     geom_sf(data = bus_stops)
ggplot(data = balt_city_p) +
ggplot(data = balt_city_p) +
geom_sf() +
geom_sf(data = bus_stops)
ggplot (data = balt_city) + geom_sf()
city_base <- ggplot (data = balt_city) + geom_sf()
stop_map <- city_base + ggplot(data = bus_stops) + geom_sf()
stop_map <- city_base + geom_sf(data = bus_stops)
View(stop_map)
ggplot (data = stop_map)
ggplot(data=stop_map)
stop_map_2 <- city_base + geom_point(data = bus_stops)
ggplot(data = stop_map_2) + geom_sf()
View(stop_map)
View(city_base)
stop_map_3 <- city_base + geom_point(data = "bus_stops")
rlang::last_error()
stop_map_3 <- city_base + geom_point(data = bus_stops)
stop_map_3
stop_map_3 <- city_base + geom_point(data = bus_stops, aes(x=Longitude,y=Latitude))
stop_map_3
stop_map_2
stop_map
stop_map_3 <- city_base + geom_sf(data = bus_stops)
stop_map_3
dev.off()
no_shelt <-sf::read_sf("C:/Users/farep/Documents/GitHub/farepay/myrepo/Maryland_Transit_-_MTA_Bus_Stops/no_shelt.shp")
balt <- sf::read_sf(""C:/Users/farep/Documents/GitHub/farepay/myrepo/tl_2019_24510_faces.shp"")
balt <- sf::read_sf("C:/Users/farep/Documents/GitHub/farepay/myrepo/tl_2019_24510_faces.shp")
ggplot(data = balt) +
geom_sf()
ggplot(data = balt) +
geom_sf()+
geom_sf(data = no_shelt)
library(tidyverse)
library(tidycensus)
library(mapview)
library(tigris)
library(sf) ##load libraries
library(ggplot2)
## read in data
fiveft <- st_read(dsn ="C:\\Users\\farep\\Documents\\426\\lab2\\R shapes\\fivefeet.shp")
tracts <- st_read(dsn = "C:\\Users\\farep\\Documents\\426\\lab2\\R shapes\\md.shp")
twoft <- st_read(dsn ="C:\\Users\\farep\\Documents\\426\\lab2\\R shapes\\twofeet.shp")
sf_use_s2(FALSE)
tracts_twoft <- st_intersection(tracts, twoft)
tracts_fiveft <- st_intersection(tracts, fiveft)
tracts_twoft_UTM <- st_transform(tracts_twoft, crs = "32618")
tracts_twoft_UTM <- st_transform(tracts_twoft, crs = "EPSG:32618")
tractsUTM <- st_transform(tracts, crs = "EPSG:32618")
tracts_fiveft_UTM <- st_transform(tracts_fiveft, crs = "EPSG:32618")
tracts_twoft_UTM <- st_area(tracts_twoft_UTM)
tracts_fiveft_UTM <- st_area(tracts_fiveft_UTM)
tracts_UTM <- st_area(tracts_UTM)
tractsUTM <- st_area(tractsUTM)
tracts_twoft <- st_intersection(tracts, twoft)
tracts_fiveft <- st_intersection(tracts, fiveft)
tracts_fiveft_utm
tracts_twoft_UTM <- st_transform(tracts_twoft, crs = "EPSG:32618")
tractsUTM <- st_transform(tracts, crs = "EPSG:32618")
tracts_fiveft_UTM <- st_transform(tracts_fiveft, crs = "EPSG:32618")
tracts_twoft_UTM$area2 <- st_area(tracts_twoft_UTM)
tracts_fiveft_UTM$area2 <- st_area(tracts_fiveft_UTM)
tractsUTM$area2 <- st_area(tractsUTM)
View(tractsUTM)
View(tracts_fiveft_UTM)
tracts_fiveft_utm
install.packages(sf)
install.packages('sf')
install.packages('leaflet')
install.packages('mapview')
install.packages('mapview')
install.packages('mapedit')
#| echo: false
#| output: false
library(sf)
library(leaflet)
library(mapview)
library(mapedit)
#| echo: false
#| output: false
library(dplyr)
library(tidyverse)
data<- read_csv("https://opendata.maryland.gov/api/views/8ypa-c9d9/rows.csv")
data<- read_csv(
file = "https://opendata.maryland.gov/api/views/8ypa-c9d9/rows.csv",
name_repair = janitor::make_clean_names
)
install.package("httr2")
install.packages("httr2")
library(httr2)
req <- request("http://https://opendata.maryland.gov/")
View (req)
summary (req)
req <- req_url_path_append(req, "data.json")
req
resp <- req_perform(req)
body <- resp_body_json(resp, simplifyVector = TRUE)
resp <- req_perform(req)
rlang::last_error()
req
resp <- req_perform(req)
resp <- req_perform("req")
req <- req_url_path_append(req, "data.json")
resp <- httr2::req_perform(req)
#| echo: false
#| output: false
library(dplyr)
data <-
readr::read_csv(
file = "https://opendata.maryland.gov/api/views/8ypa-c9d9/rows.csv"
)
glimpse(data)
#| echo: false
#| output: false
library(dplyr)
data <-
readr::read_csv(
file = "https://opendata.maryland.gov/api/views/8ypa-c9d9/rows.csv"
)
glimpse(data)
#| echo: false
#| output: false
library(dplyr)
data <-
readr::read_csv(
file = "https://opendata.maryland.gov/api/views/8ypa-c9d9/rows.csv"
)
glimpse(data)
req <- httr2::request("https://opendata.maryland.gov")
req <- httr2::req_url_path_append(req, "data.json")
names(resp)
resp <- httr2::req_perform(req)
resp <- httr2::resp_body_json(resp, simplifyVector = TRUE)
names(resp)
str(resp)
glimpse(resp$dataset)
install.packages("RSocrata")
datasets <-
RSocrata::ls.socrata("https://opendata.maryland.gov")
AFOs <-
RSocrata::read.socrata(
url = "https://opendata.maryland.gov/api/views/jtnq-pm89/rows.csv"
)
View(AFOs)
library(sfext)
install.packages("sfext")
remotes::install_github("https://github.com/yonghah/esri2sf")
install.packages("remotes")
remotes::install_github("https://github.com/yonghah/esri2sf")
URL <- "https://geodata.md.gov/imap/rest/services/Transportation/MD_Transit/FeatureServer/11"
library(esri2sf)
data <- esri2sf(URL)
mapview(data)
install.packages("mapview")
library(mapview)
mapview(data)
View(data)
data <- (url,
data <- (URL,
data <- esri2sf(URL,
where = "Trans_Mode = 'Marc Brunswick'"
crs = 2804)
data <- esri2sf(URL,
where = "Trans_Mode = 'Marc Brunswick'",
crs = 2804)
mapview(data)
install.packages('tidytransit')
library(tidytransit)
library(sf)
library(tidyverse)
mta <- read_gtfs('https://feeds.mta.maryland.gov/gtfs/local-bus)
mta <- read_gtfs('https://feeds.mta.maryland.gov/gtfs/local-bus)
mta <- read_gtfs('https://feeds.mta.maryland.gov/gtfs/local-bus')
mta <- read_gtfs('https://mdotmta-gtfs.s3.amazonaws.com/mdotmta_gtfs_localbus.zip')
summray(mta)
summary(mta)
head(mta$stops)
names(mta)
mobilitydata.csv = read.csv("https://bit.ly/catalogs-csv")
mobilitydata_feedlist = mobilitydata.csv %>% as_tibble() %>%
filter(data_type == "gtfs")
str(mobilitydata_feedlist)
gtfs_path_mta <- mobilitydata_feedlist %>%
filter(provider == "Maryland Transportation Authority") %>%
pull(urls.direct_download)
gtfs_mta = read_gtfs(gtfs_path_mta)
head(mta$agency_id)
summary(mta$agency)
head(mta$agency)
gtfs_path_mta <- mobilitydata_feedlist %>%
filter(provider == "Maryland Transit Administration") %>%
pull(urls.direct_download)
gtfs_path_mta <- mobilitydata_feedlist %>%
filter(provider == "Maryland Transit Administration") %>%
pull(urls.direct_download)
gtfs_mta = read_gtfs(gtfs_path_mta)
gtfs_path_mta <- mobilitydata_feedlist %>%
filter(provider == "Maryland Transit Administration") %>%
pull(urls.direct_download)
gtfs_mta = read_gtfs(gtfs_path_mta)
summary(gtfs_path_mta)
gtfs_path_mta
gtfs_mta = read_gtfs("https://mdotmta-gtfs.s3.amazonaws.com/mdotmta_gtfs_localbus.zip")
summary(gtfs_mta)
mobility_data_mta <- mobilitydata_feedlist %>%
+   filter(provider == "Maryland Transit Administration")
gtfs_path_mta <- mobilitydata_feedlist %>%
+   filter("Maryland Transit Administration")
summary(mobilitydata.csv)
head(mobilitydata.csv)
mobilitydata_mta <- filter (mobilitydata.csv, provider == "Maryland Transit Administration")
View(mobilitydata_mta)
summary(mobilitydata_mta)
bbox_polygon = function(lon_min, lon_max, lat_min, lat_max {})
corner_coords = matrix(
c(lon_min, lat_min,)
)
mta_sf = mobilitydata_mta %>%
group_by(mdb_source_id) %>%
mutate(geometry = bbox_polygon(location.bounding_box.minimum_longitude,
location.bounding_box.maximum_longitude,
location.bounding_box.minimum_latitude,
location.bounding_box.maximum_latitude)) %>%
ungroup() %>% st_as_sf()
bbox_polygon = function(lon_min, lon_max, lat_min, lat_max {
bbox_polygon = function(lon_min, lon_max, lat_min, lat_max) {
corner_coords = matrix(
c(lon_min, lat_min,
lon_min, lat_max,
lon_max, lat_max,
lon_max, lat_min,
lon_min, lat_min),
ncol = 2, byrow = T
)
polyg = st_polygon(list(corner_coords))
return(st(sfc)polyg, crs = 4326)
bbox_polygon = function(lon_min, lon_max, lat_min, lat_max) {
corner_coords = matrix(
c(lon_min, lat_min,
lon_min, lat_max,
lon_max, lat_max,
lon_max, lat_min,
lon_min, lat_min),
ncol = 2, byrow = T
)
polyg = st_polygon(list(corner_coords))
return(st_sfc(polyg, crs = 4326))
}
mta_sf = mobilitydata_mta %>%
group_by(mdb_source_id) %>%
mutate(geometry = bbox_polygon(location.bounding_box.minimum_longitude,
location.bounding_box.maximum_longitude,
location.bounding_box.minimum_latitude,
location.bounding_box.maximum_latitude)) %>%
ungroup() %>% st_as_sf()
install.packages('leaflet')
library(leaflet)
leaflet() %>%
addProviderTiles(provider = providers$CartoDB.Positron) %>%
addPolygons(data = MobilityData_sf, weight = 2,
fillOpacity = 0.1, label = substr(MobilityData_sf$provider, 0, 60))
leaflet() %>%
addProviderTiles(provider = providers$CartoDB.Positron) %>%
addPolygons(data = MobilityData_sf, weight = 2,
fillOpacity = 0.1, label = substr(mta_sf$provider, 0, 60))
leaflet() %>%
addProviderTiles(provider = providers$CartoDB.Positron) %>%
addPolygons(data = mta_sf, weight = 2,
fillOpacity = 0.1, label = substr(mta_sf$provider, 0, 60))
leaflet() %>%
addProviderTiles(provider = providers$CartoDB.Positron) %>%
addPolygons(data = mta_sf, weight = 2,
fillOpacity = 0.1, label = substr(mta_sf$name, 0, 60))
pak::pkg_install("elipousson/mapmaryland")
install.packages("elipousson/mapmaryland")
install.packages("pak")
pak::pkg_install("elipousson/mapmaryland")
library(mapmaryland)
library(mapmaryland)
library(mapmaryland)
pkgbuild::check_build_tools(debug = TRUE)
pak::pkg_install("elipousson/mapmaryland")
pak::pkg_install("elipousson/mapmaryland")
library(mapmaryland)
library(sf)
library(tidycensus)
library(tidyverse)
View (md_counties)
dorchester <- get_md_tigris(name = "Dorchester County",
type = "tracts"
crs = "4326"
dorchester <- get_md_tigris(name = "Dorchester County",
type = "tracts",
crs = "4326",
erase_water = TRUE)
dorchester <- get_md_tigris(name = "Dorchester County",
erase_water = TRUE)
somerset <- get_md_tigris(name = "Somerset County",
erase_water = TRUE)
dor_som <- inner_join(dorchester, somerset)
dor_som <- st_join(dorchester, somerset)
View(dor_som)
View(somerset)
View(dorchester)
dor_som <- st_join(dorchester, somerset)
View(dor_som)
dor_som <- st_union(dorchester, somerset)
dor_som <- st_union(dorchester, somerset)
dor_som_union <- st_union(dorchester, somerset)
plot(dor_som_union)
View(dor_som_union)
combine <- st_combine (dorchester, somerset)
dor_som_union <- st_union(dorchester, somerset)
combine <- st_combine (dorchester, somerset)
plot(dor_som_union)
mihp < - get_mht_data(
dor_som_union,
type = "mihp"
)
mihp < - get_mht_data(dor_som_union, type = "mihp")
mhp < - get_mht_data(dor_som_union, type = "nr")
mhp <- get_mht_data(dor_som_union, type = "mihp")
mhp <- get_mht_data(dor_som_union, type = "mihp")
mhp <- get_mht_data(dor_som_union, type = "nr")
mhp <- get_mht_data(dorchester, type = "nr")
mhp <- get_mht_data(dorchester, type = "easements")
install.packages("osmdata")
library(osmdata)
bbox <- getbb("Baltimore County, MD")
bbobx
bbox
q <- opq(bbox = bbox)
q <- opq(bbox = bbox) %>%
add_osm_feature(key = "amenity", value = "bench")
data <- osmdata_sf(q)
library(mapview)
str(data)
data$osm_points
osm_points <- (data$osm_points)
mapview(osm_points)
mapview(data$osm_lines)
points_unique <- unique_osmdata(osm_points)
points_unique <- unique_osmdata(data$osm_points)
points_unique <- unique_osmdata(data)
mapview(data$osm_points)
mapview(points_unique)
mapview(points_unique$osm_points)
data_combined <- dplyr::bind_rows(data$osm_lines)
data_combined <- dplyr::bind_rows(data$osm_lines, data$osm_points)
mapview(data_combined)
bbox <- getbb("Baltimore City, MD")
q <- opq(bbox = bbox) %>%
library(mapview)
library(sf)
points <- st_read("C:\\Users\\farep\\Documents\\426\\Final Project\\African American Historic Sites in Somerset County.kml")
mapview(points)
plot (points)
View(points)
library(devtools)
gtfs_18 <- read_gtfs("gtfs_6_2018.zip")
#| output: false
library(ggplot2)
library(gtfstools)
library(sf)
library(dplyr)
gtfs_18 <- read_gtfs("gtfs_6_2018.zip")
gtfs_17 <- read_gtfs ("gtfs 3_17.zip")
route_ids_18 <- as.character(c("10543", "10539", "10542", "10535", "10468", "10538"))
route_ids_17 <- as.character(c("9336", "9338", "9364", "9365", "9368"))
routes_18 <- filter_by_route_id(gtfs_18, route_id = route_ids_18)
routes_17 <- filter_by_route_id(gtfs_17, route_id = route_ids_17)
routes_17$routes$route_short_name
routes_18$routes$route_short_name
trip_geom_17 <- get_trip_geometry(routes_17, file = "shapes")
trip_geom_18 <- get_trip_geometry(routes_18, file = "shapes")
class(trip_geom_17)
class(trip_geom_18)
routes_geom_17_sf_mrg <- merge(trip_geom_17, routes_17$trips)
routes_geom_18_sf_mrg <- merge(trip_geom_18, routes_18$trips)
plot <- ggplot(routes_geom_17_sf_mrg, mapping = aes(color = route_id)) +
geom_sf(linewidth = 3)+
scale_color_manual(values = c("9336" = "#939598",
"9338" = "#851F83",
"9364" = "#6F4C2F",
"9365" =  "#D71921",
"9368" = "#6CA144"),
labels = c("8", "10", "47",
"48", "52"),
name = "Pre-LINK Routes")
plot <- plot +
geom_sf(data = routes_geom_18_sf_mrg, mapping = aes(fill = route_id))+
geom_sf(linewidth = 1.5)+
scale_fill_manual(values = c("10468" = "#939598",
"10535" = "#6F4C2F",
"10538" = "#6CA144",
"10539" =  "#2E3192",
"10542" = "#851F83",
"10543" = "#D71921"),
labels = c("80 (LocalLink)", "Brown", "Lime",
"Navy", "Purple", "Red"),
name = "CityLink Routes")
plot <- ggplot(routes_geom_17_sf_mrg, mapping = aes(color = route_id)) +
geom_sf(linewidth = 3)+
scale_color_manual(values = c("9336" = "#939598",
"9338" = "#851F83",
"9364" = "#6F4C2F",
"9365" =  "#D71921",
"9368" = "#6CA144"),
labels = c("8", "10", "47",
"48", "52"),
name = "Pre-LINK Routes")
plot <- plot +
geom_sf(data = routes_geom_18_sf_mrg, mapping = aes(fill = route_id))+
geom_sf(linewidth = 1.5)+
scale_fill_manual(values = c("10468" = "#939598",
"10535" = "#6F4C2F",
"10538" = "#6CA144",
"10539" =  "#2E3192",
"10542" = "#851F83",
"10543" = "#D71921"),
labels = c("80 (LocalLink)", "Brown", "Lime",
"Navy", "Purple", "Red"),
name = "CityLink Routes")
plot
copy NUL nojekyll
Sys.setenv(HOME="C:/Users/farep/Documents/GitHub/farepay/ges_600_final/exploring_bnr")
touch .nojekyll
touch .nojekyll
touch
quarto render
plot <- plot +
geom_sf(data = routes_geom_18_sf_mrg, mapping = aes(fill = route_id))+
geom_sf(linewidth = 1.5)+
scale_fill_manual(values = c("10468" = "#939598",
"10535" = "#6F4C2F",
"10538" = "#6CA144",
"10539" =  "#2E3192",
"10542" = "#851F83",
"10543" = "#D71921"),
labels = c("80 (LocalLink)", "Brown", "Lime",
"Navy", "Purple", "Red"),
name = "CityLink Routes")
library(sf)
library(tidyverse)
library(ggplot2)
library(gtfstools)
setwd("C:/Users/farep/Documents/GitHub/farepay/ges600_final")
gtfs_18 <- read_gtfs("data/gtfs_6_2018.zip")
gtfs_17 <- read_gtfs ("data/gtfs 3_17.zip")##reading in gtfs
route_ids_18 <- as.character(c("10543", "10539", "10542", "10535", "10468", "10538"))
route_ids_17 <- as.character(c("9336", "9338", "9364", "9365", "9368"))
##we are interested in these routes. the routes in 2017 are the predecessors to those in 2018.
routes_18 <- filter_by_route_id(gtfs_18, route_id = route_ids_18)
routes_17 <- filter_by_route_id(gtfs_17, route_id = route_ids_17) ##hello
##routes_17$trips <- routes_17$trips %>%
## left_join(patterns_17, by="trip_id")
##routes_18$trips <- routes_18$trips %>%
## left_join(patterns_18, by="trip_id")
##get geoms
trip_geom_17 <- get_trip_geometry(routes_17, file = "shapes")
trip_geom_18 <- get_trip_geometry(routes_18, file = "shapes")
##these sf objects could use some attributes
routes_geom_17_sf_mrg <- merge(trip_geom_17, routes_17$trips)
routes_geom_18_sf_mrg <- merge(trip_geom_18, routes_18$trips)
##make plots comparing their extents
plot <- ggplot(routes_geom_17_sf_mrg, mapping = aes(color = route_id)) +
geom_sf(linewidth = 3)+
scale_color_manual(values = c("9336" = "#939598",
"9338" = "#851F83",
"9364" = "#6F4C2F",
"9365" =  "#D71921",
"9368" = "#6CA144"),
labels = c("8", "10", "47",
"48", "52"),
name = "Pre-LINK Routes")
plot <- plot +
geom_sf(data = routes_geom_18_sf_mrg, mapping = aes(fill = route_id))+
geom_sf(linewidth = 1.5)+
scale_fill_manual(values = c("10468" = "#939598",
"10535" = "#6F4C2F",
"10538" = "#6CA144",
"10539" =  "#2E3192",
"10542" = "#851F83",
"10543" = "#D71921"),
labels = c("80 (LocalLink)", "Brown", "Lime",
"Navy", "Purple", "Red"),
name = "CityLink Routes")
plot
plot <- ggplot(routes_geom_17_sf_mrg, mapping = aes(color = route_id)) +
geom_sf(linewidth = 3)+
scale_color_manual(values = c("9336" = "#939598",
"9338" = "#851F83",
"9364" = "#6F4C2F",
"9365" =  "#D71921",
"9368" = "#6CA144",
"10468" = "#939598",
"10535" = "#6F4C2F",
"10538" = "#6CA144",
"10539" =  "#2E3192",
"10542" = "#851F83",
"10543" = "#D71921"),
labels = c("8", "10", "47",
"48", "52", "80 (LocalLink)", "Brown", "Lime",
"Navy", "Purple", "Red"),
name = "Pre-LINK Routes")
plot <- plot +
geom_sf(data = routes_geom_18_sf_mrg, mapping = aes(fill = route_id))+
geom_sf(linewidth = 1.5)
plot
