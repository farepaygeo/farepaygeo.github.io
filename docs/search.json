[
  {
    "objectID": "spatial_extent.html",
    "href": "spatial_extent.html",
    "title": "Comparing the spatial extent of CityLINK Routes with their Predecessors",
    "section": "",
    "text": "We can compare the spatial extent of some CityLINK routes and their predecessors.\n\ngtfs_18 <- read_gtfs(\"gtfs_6_2018.zip\")\ngtfs_17 <- read_gtfs (\"gtfs 3_17.zip\")\n\nLet’s load up the route_ids we are interested in for each year.\n\nroute_ids_18 <- as.character(c(\"10543\", \"10539\", \"10542\", \"10535\", \"10468\", \"10538\"))\nroute_ids_17 <- as.character(c(\"9336\", \"9338\", \"9364\", \"9365\", \"9368\"))\n\nNow let’s filter our dt_gtfs with these route_ids.\n\nroutes_18 <- filter_by_route_id(gtfs_18, route_id = route_ids_18) \nroutes_17 <- filter_by_route_id(gtfs_17, route_id = route_ids_17) \nroutes_17$routes$route_short_name\n\n[1] \"008\" \"010\" \"047\" \"048\" \"052\"\n\nroutes_18$routes$route_short_name\n\n[1] \"80\"              \"CityLink BROWN\"  \"CityLink LIME\"   \"CityLink NAVY\"  \n[5] \"CityLink PURPLE\" \"CityLink RED\"   \n\n\nGTFStools has a function that creates sf objects using the trip geometry information contained in the shapes table.\n\ntrip_geom_17 <- get_trip_geometry(routes_17, file = \"shapes\")\ntrip_geom_18 <- get_trip_geometry(routes_18, file = \"shapes\")\nclass(trip_geom_17)\n\n[1] \"sf\"         \"data.table\" \"data.frame\"\n\nclass(trip_geom_18)\n\n[1] \"sf\"         \"data.table\" \"data.frame\"\n\n\nWe need to associate them with some more info, like route_id, before we plot.\n\nroutes_geom_17_sf_mrg <- merge(trip_geom_17, routes_17$trips)\nroutes_geom_18_sf_mrg <- merge(trip_geom_18, routes_18$trips)\n\nNow we plot.\n\nplot <- ggplot(routes_geom_17_sf_mrg, mapping = aes(color = route_id)) +\n        geom_sf(linewidth = 3)+\n        scale_color_manual(values = c(\"9336\" = \"#939598\",\n                                      \"9338\" = \"#851F83\",\n                                      \"9364\" = \"#6F4C2F\",\n                                      \"9365\" =  \"#D71921\",\n                                      \"9368\" = \"#6CA144\"),\n                                      labels = c(\"8\", \"10\", \"47\",\n                                                 \"48\", \"52\"),\n                                      name = \"Pre-LINK Routes\") \n\n        \n\nplot <- plot + \n        geom_sf(data = routes_geom_18_sf_mrg, mapping = aes(fill = route_id))+\n        geom_sf(linewidth = 1.5)+\n        scale_fill_manual(values = c(\"10468\" = \"#939598\",\n                                \"10535\" = \"#6F4C2F\",\n                                \"10538\" = \"#6CA144\",\n                                \"10539\" =  \"#2E3192\",\n                                \"10542\" = \"#851F83\",\n                                \"10543\" = \"#D71921\"),\n                     labels = c(\"80 (LocalLink)\", \"Brown\", \"Lime\",\n                                \"Navy\", \"Purple\", \"Red\"),\n                     name = \"CityLink Routes\") \nplot"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Final Project",
    "section": "",
    "text": "This is the home for my final project. More information to come. For now, click around. Under the menu, you’ll see links to various headway calculations and a comparison of the extent of Baltimore’s Bus Network, past and present."
  },
  {
    "objectID": "dec_2017.html",
    "href": "dec_2017.html",
    "title": "Calculating Headways: December 2017",
    "section": "",
    "text": "On this page, we’ll calculate weekday headways for buses operating in Baltimore circa December 2017. First we’ll use GTFStools to read in the GTFS.\n\ngtfs <- read_gtfs(\"gtfs 3_17.zip\")\nclass(gtfs)\n\n[1] \"dt_gtfs\" \"gtfs\"    \"list\"   \n\n\nNow we have a large dt_gtfs in our environment. There are a bunch of tables in this datatable, containing rows upon rows of information about transit service in December 2017. One of the tables is “routes” which contains information about route names and types.\n\nunique(gtfs$routes$route_type)\n\n[1] 3 1 0 2\n\n\nA route_type of “3” in a GTFS is a bus. Since we are only interested in buses, we can filter the entire dt_gtfs to just information about bus routes.\n\ngtfs <- filter_by_route_type(gtfs, route_type = 3) ##filter down gtfs to just bus routes\nunique(gtfs$routes$route_type) \n\n[1] 3\n\n\nAgencies assign their own route_ids and these change with each new GTFS published.\n\nhead(gtfs$routes$route_id)\n\n[1] \"9331\" \"9332\" \"9333\" \"9334\" \"9335\" \"9336\"\n\n\nI identified the route_ids of MTA’s commuter and express buses, and will now filter the gtfs again, removing those routes.\n\nroute_ids <- as.character(c(9972:10024, \"10040\")) \ngtfs_fil <- filter_by_route_id(gtfs, route_id = route_ids, keep = FALSE) ##seeya\n\nIn GTFS, trips are basically the most fine-grained keys in the data. A trip in GTFS corresponds to one bus travelling from its origin to its destination following a specific sequence of stops, in a single direction (inbound or outbound). These are aggregated up to routes, which are sets of trips that serve roughly the same stops in the same sequence, inbound or outbound – but origins, destinations, and stops served may vary. Routes may contain trips that have particular services depending on the time of day.\n\nnrow(gtfs_fil$trips)\n\n[1] 11981\n\nnrow(gtfs_fil$routes)\n\n[1] 106\n\n\nAn intermediate unit can be assigned by GTFStools: a pattern. Patterns group together trips that follow the same sequence of stops. There are far fewer patterns than there are trips, but more patterns than routes.\n\npatterns <- get_stop_times_patterns(gtfs_fil)\ncount(patterns, pattern_id)\n\n# A tibble: 626 × 2\n   pattern_id     n\n        <int> <int>\n 1          1     2\n 2          2     3\n 3          3     9\n 4          4    64\n 5          5     4\n 6          6     2\n 7          7     2\n 8          8     1\n 9          9    13\n10         10    63\n# … with 616 more rows\n\n\nEach pattern_id is associated with a different number of trips. On this first page alone, we have patterns that are associated with a single trip, or patterns that are associated with dozens of trips.\nGTFStools allows us to convert all arrival and departure times from HH:MM:SS format to seconds after midnight. This is going to make calculating headways a bit easier.\n\ngtfs_fil <- convert_time_to_seconds(gtfs_fil)\nhead(gtfs_fil$stop_times$arrival_time)\n\n[1] \"15:05:00\" \"15:20:00\" \"15:20:54\" \"15:22:00\" \"15:22:48\" \"15:23:15\"\n\nhead(gtfs_fil$stop_times$arrival_time_secs)\n\n[1] 54300 55200 55254 55320 55368 55395\n\n\nThe operations we have performed so far have been on the entire dt_gtfs. Now we need to work on some of the tables within the dt_gtfs. This join uses trip_id to associate the pattern_id’s we just made with some of the other information we need about trips and routes in order to calculate headways.\n\ntrips_patt <- gtfs_fil$trips %>%\n  left_join(patterns, by=\"trip_id\")\nnames(trips_patt)\n\n[1] \"route_id\"        \"service_id\"      \"trip_id\"         \"trip_headsign\"  \n[5] \"trip_short_name\" \"direction_id\"    \"block_id\"        \"shape_id\"       \n[9] \"pattern_id\"     \n\n\n. Now we need to do one more join, to the stop_times table in our dt_gtfs, again using trip_id\n\ncolnames(gtfs_fil$stop_times)\n\n [1] \"trip_id\"             \"arrival_time\"        \"departure_time\"     \n [4] \"stop_id\"             \"stop_sequence\"       \"stop_headsign\"      \n [7] \"pickup_type\"         \"drop_off_type\"       \"shape_dist_traveled\"\n[10] \"departure_time_secs\" \"arrival_time_secs\"  \n\n\nThis table has trip_id, which is the primary key we need for the join. It also has the arrival_time_secs column we created with the get_stop_times_secs function and stop_sequence, which describes the order of stop_id’s followed on each trip.\n\ntrips_patt <- left_join(gtfs_fil$stop_times, trips_patt, by = \"trip_id\")\nnames(trips_patt)\n\n [1] \"trip_id\"             \"arrival_time\"        \"departure_time\"     \n [4] \"stop_id\"             \"stop_sequence\"       \"stop_headsign\"      \n [7] \"pickup_type\"         \"drop_off_type\"       \"shape_dist_traveled\"\n[10] \"departure_time_secs\" \"arrival_time_secs\"   \"route_id\"           \n[13] \"service_id\"          \"trip_headsign\"       \"trip_short_name\"    \n[16] \"direction_id\"        \"block_id\"            \"shape_id\"           \n[19] \"pattern_id\"         \n\n\nBefore we go any further, we should use service_id to keep only Monday to Friday trips.\n\nunique(trips_patt$service_id)\n\n[1] \"1\"   \"401\" \"2\"   \"3\"  \n\nprint(gtfs_fil$calendar)\n\n   service_id monday tuesday wednesday thursday friday saturday sunday\n1:          1      1       1         1        1      1        0      0\n2:          2      0       0         0        0      0        1      0\n3:          3      0       0         0        0      0        0      1\n4:        401      0       0         0        0      1        0      0\n   start_date   end_date\n1: 2017-02-05 2017-06-17\n2: 2017-02-05 2017-06-17\n3: 2017-02-05 2017-06-17\n4: 2017-02-05 2017-06-17\n\n\nTrips that run M-F are given a service_id of “1”.\n\nweekday_trips <- filter(trips_patt, service_id == 1)\nunique(weekday_trips$service_id)\n\n[1] \"1\"\n\n\nWe are almost ready to calculate headways. We have to group the weekday_trips table by pattern_id and stop_sequence.\n\nweekday_trips_grp <- group_by(weekday_trips, pattern_id, stop_sequence)\ntally(weekday_trips_grp)\n\n# A tibble: 28,535 × 3\n   pattern_id stop_sequence     n\n        <int>         <int> <int>\n 1          1             1     2\n 2          1             2     2\n 3          1             3     2\n 4          1             4     2\n 5          1             5     2\n 6          1             6     2\n 7          1             7     2\n 8          1             8     2\n 9          1             9     2\n10          1            10     2\n# … with 28,525 more rows\n\n\nNow that we have a grouped table, we can use lag() to calculate the difference in departure times within a pattern for each stop in sequence.\n\nheadways_2017_2 <- mutate(weekday_trips_grp, diff = departure_time_secs-lag(departure_time_secs))\n\nFor example, lag will calculate the difference within pattern_id 2 of departure_time_secs from trip_id 156032 to 156033 at each of their shared 49 stops in sequence.\n\npat_2 <- filter(headways_2017_2, pattern_id == \"2\", stop_sequence == 2)\nhead(pat_2$diff)\n\n[1]    NA 32460  3720\n\n\nThe first row is NA because it is the first trip of pattern_id 2; there are no preceding trips from which to calculate difference.\nWe need to do a little more cleaning before we plot our headways. First, we need to convert diff from seconds to minutes.\n\nheadways_2017_2 <- mutate(headways_2017_2, headways_m = diff/60)\n\nSome patterns are associated with trips whose trip_ids increase while their departure time decreases.\n\nneg <- filter(headways_2017_2, pattern_id == \"155\", stop_sequence == \"2\")\nhead(neg$departure_time_secs)\n\n[1] 24079 26479 21679 19815\n\nhead(neg$headways_m)\n\n[1]        NA  40.00000 -80.00000 -31.06667\n\n\nThis does not affect the integrity of the headway calculation but it means we have some negatives that we need to deal with using abs().\n\nheadways_2017_2$headways_m <- abs(headways_2017_2$headways_m)\n\nWong (2013) recommends removing patterns with headways of less than 5 minutes and greater than 90. Headways of less than 3 minutes correspond to school dismissal times or otherwise exceptional services; headways of greater than 90 minutes can indicate a break in service.\n\nheadways_2017_2_fil <- filter(headways_2017_2, headways_m > 3, headways_m < 90)\nrange(headways_2017_2_fil$headways_m)\n\n[1]  4.00000 89.93333\n\n\nWe are going to plot the mean headways of each pattern_id.\n\nheadways_2017_2_fil <- headways_2017_2_fil %>% group_by (pattern_id)\nmean_headways_2017_2 <- headways_2017_2_fil  %>% summarise(mean_hw = mean(headways_m))\n##spit out plot\nhistogram_17_2 <- ggplot(mean_headways_2017_2, aes(x=mean_hw)) +\n  geom_histogram(binwidth = 5, color = \"#FDB90B\", fill = \"#A30330\") +\n  geom_vline(aes(xintercept = mean(mean_hw)), color = \"black\", linetype = \"dashed\", size = 1)+\n  scale_x_continuous(name = \"Mean Headways by Pattern (minutes)\", breaks=seq(5,90,5))+\n  ylab(\"Count (Patterns)\") +\n  theme(panel.grid.minor.y = element_blank(),\n        panel.grid.major.x = element_blank(),\n        panel.grid.minor.x = element_blank())\nhistogram_17_2"
  },
  {
    "objectID": "july_15.html",
    "href": "july_15.html",
    "title": "Calculating Headways: July 2015",
    "section": "",
    "text": "On this page, we’ll calculate weekday headways for buses operating in Baltimore circa July 2015. First we’ll use GTFStools to read in the GTFS.\n\ngtfs <- read_gtfs(\"gtfs 7_2015.zip\")\nclass(gtfs)\n\n[1] \"dt_gtfs\" \"gtfs\"    \"list\"   \n\n\nNow we have a large dt_gtfs in our environment. There are a bunch of tables in this datatable, containing rows upon rows of information about transit service in July 2015. One of the tables is “routes” which contains information about route names and types.\n\nunique(gtfs$routes$route_type)\n\n[1] 3 1 0 2\n\n\nA route_type of “3” in a GTFS is a bus. Since we are only interested in buses, we can filter the entire dt_gtfs to just information about bus routes.\n\ngtfs <- filter_by_route_type(gtfs, route_type = 3) ##filter down gtfs to just bus routes\nunique(gtfs$routes$route_type) \n\n[1] 3\n\n\nAgencies assign their own route_ids and these change with each new GTFS published.\n\nhead(gtfs$routes$route_id)\n\n[1] \"7517\" \"7518\" \"7519\" \"7520\" \"7521\" \"7522\"\n\n\nI identified the route_ids of MTA’s commuter and express buses, and will now filter the gtfs again, removing those routes.\n\nroute_ids <- as.character(c(7574:7827, \"WS\", \"CS\", \"ES\", \"7547\", \"7563\"))\ngtfs_fil <- filter_by_route_id(gtfs, route_id = route_ids, keep = FALSE) ##seeya\n\nIn GTFS, trips are basically the most fine-grained keys in the data. A trip in GTFS corresponds to one bus travelling from its origin to its destination following a specific sequence of stops, in a single direction (inbound or outbound). These are aggregated up to routes, which are sets of trips that serve roughly the same stops in the same sequence, inbound or outbound – but origins, destinations, and stops served may vary. Routes may contain trips that have particular services depending on the time of day.\n\nnrow(gtfs_fil$trips)\n\n[1] 14103\n\nnrow(gtfs_fil$routes)\n\n[1] 53\n\n\nAn intermediate unit can be assigned by GTFStools: a pattern. Patterns group together trips that follow the same sequence of stops. There are far fewer patterns than there are trips, but more patterns than routes.\n\npatterns <- get_stop_times_patterns(gtfs_fil)\ncount(patterns, pattern_id)\n\n# A tibble: 342 × 2\n   pattern_id     n\n        <int> <int>\n 1          1     3\n 2          2    16\n 3          3    87\n 4          4     4\n 5          5     4\n 6          6    18\n 7          7    86\n 8          8     4\n 9          9    11\n10         10     3\n# … with 332 more rows\n\n\nEach pattern_id is associated with a different number of trips. On this first page alone, we have patterns that are associated with a single trip, or patterns that are associated with dozens of trips.\nGTFStools allows us to convert all arrival and departure times from HH:MM:SS format to seconds after midnight. This is going to make calculating headways a bit easier.\n\ngtfs_fil <- convert_time_to_seconds(gtfs_fil)\nhead(gtfs_fil$stop_times$arrival_time)\n\n[1] \"4:32:00\" \"4:32:27\" \"4:32:56\" \"4:33:25\" \"4:34:00\" \"4:35:00\"\n\nhead(gtfs_fil$stop_times$arrival_time_secs)\n\n[1] 16320 16347 16376 16405 16440 16500\n\n\nThe operations we have performed so far have been on the entire dt_gtfs. Now we need to work on some of the tables within the dt_gtfs. This join uses trip_id to associate the pattern_id’s we just made with some of the other information we need about trips and routes in order to calculate headways.\n\ntrips_patt <- gtfs_fil$trips %>%\n  left_join(patterns, by=\"trip_id\")\nnames(trips_patt)\n\n[1] \"route_id\"        \"service_id\"      \"trip_id\"         \"trip_headsign\"  \n[5] \"trip_short_name\" \"direction_id\"    \"block_id\"        \"shape_id\"       \n[9] \"pattern_id\"     \n\n\n. Now we need to do one more join, to the stop_times table in our dt_gtfs, again using trip_id\n\ncolnames(gtfs_fil$stop_times)\n\n [1] \"trip_id\"             \"arrival_time\"        \"departure_time\"     \n [4] \"stop_id\"             \"stop_sequence\"       \"stop_headsign\"      \n [7] \"pickup_type\"         \"drop_off_type\"       \"shape_dist_traveled\"\n[10] \"departure_time_secs\" \"arrival_time_secs\"  \n\n\nThis table has trip_id, which is the primary key we need for the join. It also has the arrival_time_secs column we created with the get_stop_times_secs function and stop_sequence, which describes the order of stop_id’s followed on each trip.\n\ntrips_patt <- left_join(gtfs_fil$stop_times, trips_patt, by = \"trip_id\")\nnames(trips_patt)\n\n [1] \"trip_id\"             \"arrival_time\"        \"departure_time\"     \n [4] \"stop_id\"             \"stop_sequence\"       \"stop_headsign\"      \n [7] \"pickup_type\"         \"drop_off_type\"       \"shape_dist_traveled\"\n[10] \"departure_time_secs\" \"arrival_time_secs\"   \"route_id\"           \n[13] \"service_id\"          \"trip_headsign\"       \"trip_short_name\"    \n[16] \"direction_id\"        \"block_id\"            \"shape_id\"           \n[19] \"pattern_id\"         \n\n\nBefore we go any further, we should use service_id to keep only Monday to Friday trips.\n\nunique(trips_patt$service_id)\n\n[1] \"1\" \"2\" \"3\" \"4\"\n\nprint(gtfs_fil$calendar)\n\n   service_id monday tuesday wednesday thursday friday saturday sunday\n1:          1      1       1         1        1      1        0      0\n2:          2      0       0         0        0      0        1      0\n3:          3      0       0         0        0      0        0      1\n4:          4      0       0         0        0      0        0      1\n   start_date   end_date\n1: 2015-06-14 2015-08-29\n2: 2015-06-14 2015-08-29\n3: 2015-06-14 2015-08-29\n4: 2015-06-14 2015-08-29\n\n\nTrips that run M-F are given a service_id of “1”.\n\nweekday_trips <- filter(trips_patt, service_id == 1)\nunique(weekday_trips$service_id)\n\n[1] \"1\"\n\n\nWe are almost ready to calculate headways. We have to group the weekday_trips table by pattern_id and stop_sequence.\n\nweekday_trips_grp <- group_by(weekday_trips, pattern_id, stop_sequence)\ntally(weekday_trips_grp)\n\n# A tibble: 22,449 × 3\n   pattern_id stop_sequence     n\n        <int>         <int> <int>\n 1          1             1     3\n 2          1             2     3\n 3          1             3     3\n 4          1             4     3\n 5          1             5     3\n 6          1             6     3\n 7          1             7     3\n 8          1             8     3\n 9          1             9     3\n10          1            10     3\n# … with 22,439 more rows\n\n\nNow that we have a grouped table, we can use lag() to calculate the difference in departure times within a pattern for each stop in sequence.\n\nheadways_2015 <- mutate(weekday_trips_grp, diff = departure_time_secs-lag(departure_time_secs))\n\nFor example, lag will calculate the difference within pattern_id 2 of departure_time_secs from trip_id 156032 to 156033 at each of their shared 49 stops in sequence.\n\npat_2 <- filter(headways_2015, pattern_id == \"2\", stop_sequence == 2)\nhead(pat_2$diff)\n\n[1]   NA 1500 1500 1320 2580 4620\n\n\nThe first row is NA because it is the first trip of pattern_id 2; there are no preceding trips from which to calculate difference.\nWe need to do a little more cleaning before we plot our headways. First, we need to convert diff from seconds to minutes.\n\nheadways_2015 <- mutate(headways_2015, headways_m = diff/60)\n\nSome patterns are associated with trips whose trip_ids increase while their departure time decreases.\n\nneg <- filter(headways_2015, pattern_id == \"155\", stop_sequence == \"2\")\nhead(neg$departure_time_secs)\n\n[1] 32580 31620 30780 29460 29100 28500\n\nhead(neg$headways_m)\n\n[1]  NA -16 -14 -22  -6 -10\n\n\nThis does not affect the integrity of the headway calculation but it means we have some negatives that we need to deal with using abs().\n\nheadways_2015$headways_m <- abs(headways_2015$headways_m)\n\nWong (2013) recommends removing patterns with headways of less than 5 minutes and greater than 90. Headways of less than 3 minutes correspond to school dismissal times or otherwise exceptional services; headways of greater than 90 minutes can indicate a break in service.\n\nheadways_2015_fil <- filter(headways_2015, headways_m > 3, headways_m < 90)\nrange(headways_2015_fil$headways_m)\n\n[1]  5.00000 89.96667\n\n\nWe are going to plot the mean headways of each pattern_id.\n\nheadways_2015_fil <- headways_2015_fil %>% group_by (pattern_id)\nmean_headways_2015 <- headways_2015_fil  %>% summarise(mean_hw = mean(headways_m))\n##spit out plot\nhistogram_15 <- ggplot(mean_headways_2015, aes(x=mean_hw)) +\n  geom_histogram(binwidth = 5, color = \"#FDB90B\", fill = \"#A30330\") +\n  geom_vline(aes(xintercept = mean(mean_hw)), color = \"black\", linetype = \"dashed\", size = 1)+\n  scale_x_continuous(name = \"Mean Headways by Pattern (minutes)\", breaks=seq(5,90,5))+\n  ylab(\"Count (Patterns)\") +\n  theme(panel.grid.minor.y = element_blank(),\n        panel.grid.major.x = element_blank(),\n        panel.grid.minor.x = element_blank())\nhistogram_15"
  },
  {
    "objectID": "jun_18.html",
    "href": "jun_18.html",
    "title": "Calculating Headways: June 2018",
    "section": "",
    "text": "On this page, we’ll calculate weekday headways for buses operating in Baltimore circa June 2018. First we’ll use GTFStools to read in the GTFS.\n\ngtfs <- read_gtfs(\"gtfs_6_2018.zip\")\nclass(gtfs)\n\n[1] \"dt_gtfs\" \"gtfs\"    \"list\"   \n\n\nNow we have a large dt_gtfs in our environment. There are a bunch of tables in this datatable, containing rows upon rows of information about transit service in March 2017. One of the tables is “routes” which contains information about route names and types.\n\nunique(gtfs$routes$route_type)\n\n[1] 3 1 0 2\n\n\nA route_type of “3” in a GTFS is a bus. Since we are only interested in buses, we can filter the entire dt_gtfs to just information about bus routes.\n\ngtfs <- filter_by_route_type(gtfs, route_type = 3) ##filter down gtfs to just bus routes\nunique(gtfs$routes$route_type) \n\n[1] 3\n\n\nAgencies assign their own route_ids and these change with each new GTFS published.\n\nhead(gtfs$routes$route_id)\n\n[1] \"10436\" \"10437\" \"10438\" \"10439\" \"10440\" \"10441\"\n\n\nI identified the route_ids of MTA’s commuter and express buses, and will now filter the gtfs again, removing those routes.\n\nroute_ids <- as.character(c(10482:10532)) \ngtfs_fil <- filter_by_route_id(gtfs, route_id = route_ids, keep = FALSE) ##seeya\n\nIn GTFS, trips are basically the most fine-grained keys in the data. A trip in GTFS corresponds to one bus travelling from its origin to its destination following a specific sequence of stops, in a single direction (inbound or outbound). These are aggregated up to routes, which are sets of trips that serve roughly the same stops in the same sequence, inbound or outbound – but origins, destinations, and stops served may vary. Routes may contain trips that have particular services depending on the time of day.\n\nnrow(gtfs_fil$trips)\n\n[1] 13117\n\nnrow(gtfs_fil$routes)\n\n[1] 56\n\n\nAn intermediate unit can be assigned by GTFStools: a pattern. Patterns group together trips that follow the same sequence of stops. There are far fewer patterns than there are trips, but more patterns than routes.\n\npatterns <- get_stop_times_patterns(gtfs_fil)\ncount(patterns, pattern_id)\n\n# A tibble: 173 × 2\n   pattern_id     n\n        <int> <int>\n 1          1   112\n 2          2   112\n 3          3   169\n 4          4   170\n 5          5   126\n 6          6   126\n 7          7   100\n 8          8   101\n 9          9    64\n10         10    37\n# … with 163 more rows\n\n\nEach pattern_id is associated with a different number of trips. On this first page alone, we have patterns that are associated with a single trip, or patterns that are associated with dozens of trips.\nGTFStools allows us to convert all arrival and departure times from HH:MM:SS format to seconds after midnight. This is going to make calculating headways a bit easier.\n\ngtfs_fil <- convert_time_to_seconds(gtfs_fil)\nhead(gtfs_fil$stop_times$arrival_time)\n\n[1] \"5:41:00\" \"5:41:49\" \"5:42:38\" \"5:43:13\" \"5:43:49\" \"5:44:46\"\n\nhead(gtfs_fil$stop_times$arrival_time_secs)\n\n[1] 20460 20509 20558 20593 20629 20686\n\n\nThe operations we have performed so far have been on the entire dt_gtfs. Now we need to work on some of the tables within the dt_gtfs. This join uses trip_id to associate the pattern_id’s we just made with some of the other information we need about trips and routes in order to calculate headways.\n\ntrips_patt <- gtfs_fil$trips %>%\n  left_join(patterns, by=\"trip_id\")\nnames(trips_patt)\n\n [1] \"route_id\"              \"service_id\"            \"trip_id\"              \n [4] \"trip_headsign\"         \"trip_short_name\"       \"direction_id\"         \n [7] \"block_id\"              \"shape_id\"              \"wheelchair_accessible\"\n[10] \"bikes_allowed\"         \"pattern_id\"           \n\n\n. Now we need to do one more join, to the stop_times table in our dt_gtfs, again using trip_id\n\ncolnames(gtfs_fil$stop_times)\n\n [1] \"trip_id\"             \"arrival_time\"        \"departure_time\"     \n [4] \"stop_id\"             \"stop_sequence\"       \"stop_headsign\"      \n [7] \"pickup_type\"         \"drop_off_type\"       \"shape_dist_traveled\"\n[10] \"departure_time_secs\" \"arrival_time_secs\"  \n\n\nThis table has trip_id, which is the primary key we need for the join. It also has the arrival_time_secs column we created with the get_stop_times_secs function and stop_sequence, which describes the order of stop_id’s followed on each trip.\n\ntrips_patt <- left_join(gtfs_fil$stop_times, trips_patt, by = \"trip_id\")\nnames(trips_patt)\n\n [1] \"trip_id\"               \"arrival_time\"          \"departure_time\"       \n [4] \"stop_id\"               \"stop_sequence\"         \"stop_headsign\"        \n [7] \"pickup_type\"           \"drop_off_type\"         \"shape_dist_traveled\"  \n[10] \"departure_time_secs\"   \"arrival_time_secs\"     \"route_id\"             \n[13] \"service_id\"            \"trip_headsign\"         \"trip_short_name\"      \n[16] \"direction_id\"          \"block_id\"              \"shape_id\"             \n[19] \"wheelchair_accessible\" \"bikes_allowed\"         \"pattern_id\"           \n\n\nBefore we go any further, we should use service_id to keep only Monday to Friday trips.\n\nunique(trips_patt$service_id)\n\n[1] \"1\" \"2\" \"3\"\n\nprint(gtfs_fil$calendar)\n\n   service_id monday tuesday wednesday thursday friday saturday sunday\n1:          1      1       1         1        1      1        0      0\n2:          2      0       0         0        0      0        1      0\n3:          3      0       0         0        0      0        0      1\n   start_date   end_date\n1: 2018-06-24 2018-09-01\n2: 2018-06-24 2018-09-01\n3: 2018-06-24 2018-09-01\n\n\nTrips that run M-F are given a service_id of “1”.\n\nweekday_trips <- filter(trips_patt, service_id == 1)\nunique(weekday_trips$service_id)\n\n[1] \"1\"\n\n\nWe are almost ready to calculate headways. We have to group the weekday_trips table by pattern_id and stop_sequence.\n\nweekday_trips_grp <- group_by(weekday_trips, pattern_id, stop_sequence)\ntally(weekday_trips_grp)\n\n# A tibble: 9,086 × 3\n   pattern_id stop_sequence     n\n        <int>         <int> <int>\n 1          1             1    36\n 2          1             2    36\n 3          1             3    36\n 4          1             4    36\n 5          1             5    36\n 6          1             6    36\n 7          1             7    36\n 8          1             8    36\n 9          1             9    36\n10          1            10    36\n# … with 9,076 more rows\n\n\nNow that we have a grouped table, we can use lag() to calculate the difference in departure times within a pattern for each stop in sequence.\n\nheadways_18 <- mutate(weekday_trips_grp, diff = departure_time_secs-lag(departure_time_secs))\n\nFor example, lag will calculate the difference within pattern_id 2 of departure_time_secs from trip_id 156032 to 156033 at each of their shared 49 stops in sequence.\n\npat_2 <- filter(headways_18, pattern_id == \"2\", stop_sequence == 2)\nhead(pat_2$diff)\n\n[1]   NA 2880 3180 2947 2580 1980\n\n\nThe first row is NA because it is the first trip of pattern_id 2; there are no preceding trips from which to calculate difference.\nWe need to do a little more cleaning before we plot our headways. First, we need to convert diff from seconds to minutes.\n\nheadways_18 <- mutate(headways_18, headways_m = diff/60)\n\nSome patterns are associated with trips whose trip_ids increase while their departure time decreases.\n\nneg <- filter(headways_18, pattern_id == \"155\", stop_sequence == \"2\")\nhead(neg$departure_time_secs)\n\n[1] 22826 30146 28946 27746 26546 25346\n\nhead(neg$headways_m)\n\n[1]  NA 122 -20 -20 -20 -20\n\n\nThis does not affect the integrity of the headway calculation but it means we have some negatives that we need to deal with using abs().\n\nheadways_18$headways_m <- abs(headways_18$headways_m)\n\nWong (2013) recommends removing patterns with headways of less than 5 minutes and greater than 90. Headways of less than 3 minutes correspond to school dismissal times or otherwise exceptional services; headways of greater than 90 minutes can indicate a break in service.\n\nheadways_18_fil <- filter(headways_18, headways_m > 3, headways_m < 90)\nrange(headways_18_fil$headways_m)\n\n[1]  3.033333 89.983333\n\n\nWe are going to plot the mean headways of each pattern_id.\n\nheadways_18_fil <- headways_18_fil %>% group_by (pattern_id)\nmean_headways_18 <- headways_18_fil  %>% summarise(mean_hw = mean(headways_m))\n##spit out plot\nhistogram_18 <- ggplot(mean_headways_18, aes(x=mean_hw)) +\n  geom_histogram(binwidth = 5, color = \"#FDB90B\", fill = \"#A30330\") +\n  geom_vline(aes(xintercept = mean(mean_hw)), color = \"black\", linetype = \"dashed\", size = 1)+\n  scale_x_continuous(name = \"Mean Headways by Pattern (minutes)\", breaks=seq(5,90,5))+\n  ylab(\"Count (Patterns)\") +\n  theme(panel.grid.minor.y = element_blank(),\n        panel.grid.major.x = element_blank(),\n        panel.grid.minor.x = element_blank())\nhistogram_18"
  },
  {
    "objectID": "mar_2017.html",
    "href": "mar_2017.html",
    "title": "Calculating Headways: March 2017",
    "section": "",
    "text": "On this page, we’ll calculate weekday headways for buses operating in Baltimore circa March 2017. First we’ll use GTFStools to read in the GTFS.\n\ngtfs <- read_gtfs(\"gtfs 3_17.zip\")\nclass(gtfs)\n\n[1] \"dt_gtfs\" \"gtfs\"    \"list\"   \n\n\nNow we have a large dt_gtfs in our environment. There are a bunch of tables in this datatable, containing rows upon rows of information about transit service in March 2017. One of the tables is “routes” which contains information about route names and types.\n\nunique(gtfs$routes$route_type)\n\n[1] 3 1 0 2\n\n\nA route_type of “3” in a GTFS is a bus. Since we are only interested in buses, we can filter the entire dt_gtfs to just information about bus routes.\n\ngtfs <- filter_by_route_type(gtfs, route_type = 3) ##filter down gtfs to just bus routes\nunique(gtfs$routes$route_type) \n\n[1] 3\n\n\nAgencies assign their own route_ids and these change with each new GTFS published.\n\nhead(gtfs$routes$route_id)\n\n[1] \"9331\" \"9332\" \"9333\" \"9334\" \"9335\" \"9336\"\n\n\nI identified the route_ids of MTA’s commuter and express buses, and will now filter the gtfs again, removing those routes.\n\nroute_ids <- as.character(c(9381:9437,\"WS\", \"CS\", \"ES\", \"7547\", \"7563\")) \ngtfs_fil <- filter_by_route_id(gtfs, route_id = route_ids, keep = FALSE) ##seeya\n\nIn GTFS, trips are basically the most fine-grained keys in the data. A trip in GTFS corresponds to one bus travelling from its origin to its destination following a specific sequence of stops, in a single direction (inbound or outbound). These are aggregated up to routes, which are sets of trips that serve roughly the same stops in the same sequence, inbound or outbound – but origins, destinations, and stops served may vary. Routes may contain trips that have particular services depending on the time of day.\n\nnrow(gtfs_fil$trips)\n\n[1] 10999\n\nnrow(gtfs_fil$routes)\n\n[1] 52\n\n\nAn intermediate unit can be assigned by GTFStools: a pattern. Patterns group together trips that follow the same sequence of stops. There are far fewer patterns than there are trips, but more patterns than routes.\n\npatterns <- get_stop_times_patterns(gtfs_fil)\ncount(patterns, pattern_id)\n\n# A tibble: 474 × 2\n   pattern_id     n\n        <int> <int>\n 1          1     2\n 2          2     3\n 3          3     9\n 4          4    64\n 5          5     4\n 6          6     2\n 7          7     2\n 8          8     1\n 9          9    13\n10         10    63\n# … with 464 more rows\n\n\nEach pattern_id is associated with a different number of trips. On this first page alone, we have patterns that are associated with a single trip, or patterns that are associated with dozens of trips.\nGTFStools allows us to convert all arrival and departure times from HH:MM:SS format to seconds after midnight. This is going to make calculating headways a bit easier.\n\ngtfs_fil <- convert_time_to_seconds(gtfs_fil)\nhead(gtfs_fil$stop_times$arrival_time)\n\n[1] \"15:05:00\" \"15:20:00\" \"15:20:54\" \"15:22:00\" \"15:22:48\" \"15:23:15\"\n\nhead(gtfs_fil$stop_times$arrival_time_secs)\n\n[1] 54300 55200 55254 55320 55368 55395\n\n\nThe operations we have performed so far have been on the entire dt_gtfs. Now we need to work on some of the tables within the dt_gtfs. This join uses trip_id to associate the pattern_id’s we just made with some of the other information we need about trips and routes in order to calculate headways.\n\ntrips_patt <- gtfs_fil$trips %>%\n  left_join(patterns, by=\"trip_id\")\nnames(trips_patt)\n\n[1] \"route_id\"        \"service_id\"      \"trip_id\"         \"trip_headsign\"  \n[5] \"trip_short_name\" \"direction_id\"    \"block_id\"        \"shape_id\"       \n[9] \"pattern_id\"     \n\n\n. Now we need to do one more join, to the stop_times table in our dt_gtfs, again using trip_id\n\ncolnames(gtfs_fil$stop_times)\n\n [1] \"trip_id\"             \"arrival_time\"        \"departure_time\"     \n [4] \"stop_id\"             \"stop_sequence\"       \"stop_headsign\"      \n [7] \"pickup_type\"         \"drop_off_type\"       \"shape_dist_traveled\"\n[10] \"departure_time_secs\" \"arrival_time_secs\"  \n\n\nThis table has trip_id, which is the primary key we need for the join. It also has the arrival_time_secs column we created with the get_stop_times_secs function and stop_sequence, which describes the order of stop_id’s followed on each trip.\n\ntrips_patt <- left_join(gtfs_fil$stop_times, trips_patt, by = \"trip_id\")\nnames(trips_patt)\n\n [1] \"trip_id\"             \"arrival_time\"        \"departure_time\"     \n [4] \"stop_id\"             \"stop_sequence\"       \"stop_headsign\"      \n [7] \"pickup_type\"         \"drop_off_type\"       \"shape_dist_traveled\"\n[10] \"departure_time_secs\" \"arrival_time_secs\"   \"route_id\"           \n[13] \"service_id\"          \"trip_headsign\"       \"trip_short_name\"    \n[16] \"direction_id\"        \"block_id\"            \"shape_id\"           \n[19] \"pattern_id\"         \n\n\nBefore we go any further, we should use service_id to keep only Monday to Friday trips.\n\nunique(trips_patt$service_id)\n\n[1] \"1\" \"2\" \"3\"\n\nprint(gtfs_fil$calendar)\n\n   service_id monday tuesday wednesday thursday friday saturday sunday\n1:          1      1       1         1        1      1        0      0\n2:          2      0       0         0        0      0        1      0\n3:          3      0       0         0        0      0        0      1\n   start_date   end_date\n1: 2017-02-05 2017-06-17\n2: 2017-02-05 2017-06-17\n3: 2017-02-05 2017-06-17\n\n\nTrips that run M-F are given a service_id of “1”.\n\nweekday_trips <- filter(trips_patt, service_id == 1)\nunique(weekday_trips$service_id)\n\n[1] \"1\"\n\n\nWe are almost ready to calculate headways. We have to group the weekday_trips table by pattern_id and stop_sequence.\n\nweekday_trips_grp <- group_by(weekday_trips, pattern_id, stop_sequence)\ntally(weekday_trips_grp)\n\n# A tibble: 25,486 × 3\n   pattern_id stop_sequence     n\n        <int>         <int> <int>\n 1          1             1     2\n 2          1             2     2\n 3          1             3     2\n 4          1             4     2\n 5          1             5     2\n 6          1             6     2\n 7          1             7     2\n 8          1             8     2\n 9          1             9     2\n10          1            10     2\n# … with 25,476 more rows\n\n\nNow that we have a grouped table, we can use lag() to calculate the difference in departure times within a pattern for each stop in sequence.\n\nheadways_2017 <- mutate(weekday_trips_grp, diff = departure_time_secs-lag(departure_time_secs))\n\nFor example, lag will calculate the difference within pattern_id 2 of departure_time_secs from trip_id 156032 to 156033 at each of their shared 49 stops in sequence.\n\npat_2 <- filter(headways_2017, pattern_id == \"2\", stop_sequence == 2)\nhead(pat_2$diff)\n\n[1]    NA 32460  3720\n\n\nThe first row is NA because it is the first trip of pattern_id 2; there are no preceding trips from which to calculate difference.\nWe need to do a little more cleaning before we plot our headways. First, we need to convert diff from seconds to minutes.\n\nheadways_2017 <- mutate(headways_2017, headways_m = diff/60)\n\nSome patterns are associated with trips whose trip_ids increase while their departure time decreases.\n\nneg <- filter(headways_2017, pattern_id == \"155\", stop_sequence == \"2\")\nhead(neg$departure_time_secs)\n\n[1] 24079 26479 21679 19815\n\nhead(neg$headways_m)\n\n[1]        NA  40.00000 -80.00000 -31.06667\n\n\nThis does not affect the integrity of the headway calculation but it means we have some negatives that we need to deal with using abs().\n\nheadways_2017$headways_m <- abs(headways_2017$headways_m)\n\nWong (2013) recommends removing patterns with headways of less than 5 minutes and greater than 90. Headways of less than 3 minutes correspond to school dismissal times or otherwise exceptional services; headways of greater than 90 minutes can indicate a break in service.\n\nheadways_2017_fil <- filter(headways_2017, headways_m > 3, headways_m < 90)\nrange(headways_2017_fil$headways_m)\n\n[1]  4.00000 89.93333\n\n\nWe are going to plot the mean headways of each pattern_id.\n\nheadways_2017_fil <- headways_2017_fil %>% group_by (pattern_id)\nmean_headways_2017 <- headways_2017_fil  %>% summarise(mean_hw = mean(headways_m))\n##spit out plot\nhistogram_17 <- ggplot(mean_headways_2017, aes(x=mean_hw)) +\n  geom_histogram(binwidth = 5, color = \"#FDB90B\", fill = \"#A30330\") +\n  geom_vline(aes(xintercept = mean(mean_hw)), color = \"black\", linetype = \"dashed\", size = 1)+\n  scale_x_continuous(name = \"Mean Headways by Pattern (minutes)\", breaks=seq(5,90,5))+\n  ylab(\"Count (Patterns)\") +\n  theme(panel.grid.minor.y = element_blank(),\n        panel.grid.major.x = element_blank(),\n        panel.grid.minor.x = element_blank())\nhistogram_17"
  },
  {
    "objectID": "nov_18.html",
    "href": "nov_18.html",
    "title": "Calculating Headways: November 2018",
    "section": "",
    "text": "On this page, we’ll calculate weekday headways for buses operating in Baltimore circa November 2018. First we’ll use GTFStools to read in the GTFS.\n\ngtfs <- read_gtfs(\"gtfs 11_2018.zip\")\nclass(gtfs)\n\n[1] \"dt_gtfs\" \"gtfs\"    \"list\"   \n\n\nNow we have a large dt_gtfs in our environment. There are a bunch of tables in this datatable, containing rows upon rows of information about transit service in March 2017. One of the tables is “routes” which contains information about route names and types.\n\nunique(gtfs$routes$route_type)\n\n[1] 3 1 0 2\n\n\nA route_type of “3” in a GTFS is a bus. Since we are only interested in buses, we can filter the entire dt_gtfs to just information about bus routes.\n\ngtfs <- filter_by_route_type(gtfs, route_type = 3) ##filter down gtfs to just bus routes\nunique(gtfs$routes$route_type) \n\n[1] 3\n\n\nAgencies assign their own route_ids and these change with each new GTFS published.\n\nhead(gtfs$routes$route_id)\n\n[1] \"10887\" \"10888\" \"10889\" \"10890\" \"10891\" \"10892\"\n\n\nI identified the route_ids of MTA’s commuter and express buses, and will now filter the gtfs again, removing those routes.\n\nroute_ids <- as.character(c(10933:10982, \"10997\")) \ngtfs_fil <- filter_by_route_id(gtfs, route_id = route_ids, keep = FALSE) ##seeya\n\nIn GTFS, trips are basically the most fine-grained keys in the data. A trip in GTFS corresponds to one bus travelling from its origin to its destination following a specific sequence of stops, in a single direction (inbound or outbound). These are aggregated up to routes, which are sets of trips that serve roughly the same stops in the same sequence, inbound or outbound – but origins, destinations, and stops served may vary. Routes may contain trips that have particular services depending on the time of day.\n\nnrow(gtfs_fil$trips)\n\n[1] 13285\n\nnrow(gtfs_fil$routes)\n\n[1] 56\n\n\nAn intermediate unit can be assigned by GTFStools: a pattern. Patterns group together trips that follow the same sequence of stops. There are far fewer patterns than there are trips, but more patterns than routes.\n\npatterns <- get_stop_times_patterns(gtfs_fil)\ncount(patterns, pattern_id)\n\n# A tibble: 290 × 2\n   pattern_id     n\n        <int> <int>\n 1          1   112\n 2          2   112\n 3          3   169\n 4          4   170\n 5          5   126\n 6          6   126\n 7          7   100\n 8          8   101\n 9          9    27\n10         10    17\n# … with 280 more rows\n\n\nEach pattern_id is associated with a different number of trips. On this first page alone, we have patterns that are associated with a single trip, or patterns that are associated with dozens of trips.\nGTFStools allows us to convert all arrival and departure times from HH:MM:SS format to seconds after midnight. This is going to make calculating headways a bit easier.\n\ngtfs_fil <- convert_time_to_seconds(gtfs_fil)\nhead(gtfs_fil$stop_times$arrival_time)\n\n[1] \"20:43:00\" \"20:43:57\" \"20:44:53\" \"20:45:33\" \"20:46:15\" \"20:47:21\"\n\nhead(gtfs_fil$stop_times$arrival_time_secs)\n\n[1] 74580 74637 74693 74733 74775 74841\n\n\nThe operations we have performed so far have been on the entire dt_gtfs. Now we need to work on some of the tables within the dt_gtfs. This join uses trip_id to associate the pattern_id’s we just made with some of the other information we need about trips and routes in order to calculate headways.\n\ntrips_patt <- gtfs_fil$trips %>%\n  left_join(patterns, by=\"trip_id\")\nnames(trips_patt)\n\n [1] \"route_id\"              \"service_id\"            \"trip_id\"              \n [4] \"trip_headsign\"         \"trip_short_name\"       \"direction_id\"         \n [7] \"block_id\"              \"shape_id\"              \"wheelchair_accessible\"\n[10] \"bikes_allowed\"         \"pattern_id\"           \n\n\n. Now we need to do one more join, to the stop_times table in our dt_gtfs, again using trip_id\n\ncolnames(gtfs_fil$stop_times)\n\n [1] \"trip_id\"             \"arrival_time\"        \"departure_time\"     \n [4] \"stop_id\"             \"stop_sequence\"       \"stop_headsign\"      \n [7] \"pickup_type\"         \"drop_off_type\"       \"shape_dist_traveled\"\n[10] \"departure_time_secs\" \"arrival_time_secs\"  \n\n\nThis table has trip_id, which is the primary key we need for the join. It also has the arrival_time_secs column we created with the get_stop_times_secs function and stop_sequence, which describes the order of stop_id’s followed on each trip.\n\ntrips_patt <- left_join(gtfs_fil$stop_times, trips_patt, by = \"trip_id\")\nnames(trips_patt)\n\n [1] \"trip_id\"               \"arrival_time\"          \"departure_time\"       \n [4] \"stop_id\"               \"stop_sequence\"         \"stop_headsign\"        \n [7] \"pickup_type\"           \"drop_off_type\"         \"shape_dist_traveled\"  \n[10] \"departure_time_secs\"   \"arrival_time_secs\"     \"route_id\"             \n[13] \"service_id\"            \"trip_headsign\"         \"trip_short_name\"      \n[16] \"direction_id\"          \"block_id\"              \"shape_id\"             \n[19] \"wheelchair_accessible\" \"bikes_allowed\"         \"pattern_id\"           \n\n\nBefore we go any further, we should use service_id to keep only Monday to Friday trips.\n\nunique(trips_patt$service_id)\n\n[1] \"1\" \"2\" \"3\"\n\nprint(gtfs_fil$calendar)\n\n   service_id monday tuesday wednesday thursday friday saturday sunday\n1:          1      1       1         1        1      1        0      0\n2:          2      0       0         0        0      0        1      0\n3:          3      0       0         0        0      0        0      1\n   start_date   end_date\n1: 2018-09-02 2019-02-02\n2: 2018-09-02 2019-02-02\n3: 2018-09-02 2019-02-02\n\n\nTrips that run M-F are given a service_id of “1”.\n\nweekday_trips <- filter(trips_patt, service_id == 1)\nunique(weekday_trips$service_id)\n\n[1] \"1\"\n\n\nWe are almost ready to calculate headways. We have to group the weekday_trips table by pattern_id and stop_sequence.\n\nweekday_trips_grp <- group_by(weekday_trips, pattern_id, stop_sequence)\ntally(weekday_trips_grp)\n\n# A tibble: 12,043 × 3\n   pattern_id stop_sequence     n\n        <int>         <int> <int>\n 1          1             1    36\n 2          1             2    36\n 3          1             3    36\n 4          1             4    36\n 5          1             5    36\n 6          1             6    36\n 7          1             7    36\n 8          1             8    36\n 9          1             9    36\n10          1            10    36\n# … with 12,033 more rows\n\n\nNow that we have a grouped table, we can use lag() to calculate the difference in departure times within a pattern for each stop in sequence.\n\nheadways_18_2 <- mutate(weekday_trips_grp, diff = departure_time_secs-lag(departure_time_secs))\n\nFor example, lag will calculate the difference within pattern_id 2 of departure_time_secs from trip_id 156032 to 156033 at each of their shared 49 stops in sequence.\n\npat_2 <- filter(headways_18_2, pattern_id == \"2\", stop_sequence == 2)\nhead(pat_2$diff)\n\n[1]    NA -1980 -1980 -1980 -1980 -1980\n\n\nThe first row is NA because it is the first trip of pattern_id 2; there are no preceding trips from which to calculate difference.\nWe need to do a little more cleaning before we plot our headways. First, we need to convert diff from seconds to minutes.\n\nheadways_18_2 <- mutate(headways_18_2, headways_m = diff/60)\n\nSome patterns are associated with trips whose trip_ids increase while their departure time decreases.\n\nneg <- filter(headways_18_2, pattern_id == \"155\", stop_sequence == \"2\")\nhead(neg$departure_time_secs)\n\n[1] 18023 15323 11723 34471 33571 32671\n\nhead(neg$headways_m)\n\n[1]       NA -45.0000 -60.0000 379.1333 -15.0000 -15.0000\n\n\nThis does not affect the integrity of the headway calculation but it means we have some negatives that we need to deal with using abs().\n\nheadways_18_2$headways_m <- abs(headways_18_2$headways_m)\n\nWong (2013) recommends removing patterns with headways of less than 5 minutes and greater than 90. Headways of less than 3 minutes correspond to school dismissal times or otherwise exceptional services; headways of greater than 90 minutes can indicate a break in service.\n\nheadways_18_2_fil <- filter(headways_18_2, headways_m > 3, headways_m < 90)\nrange(headways_18_2_fil$headways_m)\n\n[1]  3.033333 89.983333\n\n\nWe are going to plot the mean headways of each pattern_id.\n\nheadways_18_2_fil <- headways_18_2_fil %>% group_by (pattern_id)\nmean_headways_18_2 <- headways_18_2_fil  %>% summarise(mean_hw = mean(headways_m))\n##spit out plot\nhistogram_18_2 <- ggplot(mean_headways_18_2, aes(x=mean_hw)) +\n  geom_histogram(binwidth = 5, color = \"#FDB90B\", fill = \"#A30330\") +\n  geom_vline(aes(xintercept = mean(mean_hw)), color = \"black\", linetype = \"dashed\", size = 1)+\n  scale_x_continuous(name = \"Mean Headways by Pattern (minutes)\", breaks=seq(5,90,5))+\n  ylab(\"Count (Patterns)\") +\n  theme(panel.grid.minor.y = element_blank(),\n        panel.grid.major.x = element_blank(),\n        panel.grid.minor.x = element_blank())\nhistogram_18_2"
  }
]